trigger:
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  imageName: "contentprocessor"
  acrName: "acrcpsdev" # Replace with your Azure Container Registry name
  acrLoginServer: "acrcpsdev.azurecr.io" # Replace with your ACR login server (e.g., youracrname.azurecr.io)
  resourceGroupName: "rg-cps-dev" # Replace with your resource group name
  containerAppName: "cps-processor"
  environmentName: "cps-env-containerapp"
  managedIdentityName: "mid-CICD"
  appConfigEndpoint: "https://cps-appconfig.azconfig.io" # Replace with your App Configuration endpoint
steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: "csacto-connection" # Replace with your Azure Classic service connection name
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        # Log in to Azure Container Registry
        az acr login --name $(acrName)

        # Build the Docker image
        docker build -t $(acrLoginServer)/$(imageName):$(Build.BuildId) .

        # Push the Docker image to ACR
        docker push $(acrLoginServer)/$(imageName):$(Build.BuildId)
    displayName: "Build and push Docker image"

  - task: AzureCLI@2
    inputs:
      azureSubscription: "csacto-connection" # Replace with your Azure Classic service connection name
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        az acr repository show-tags --name $(acrName) --repository $(imageName) --output table
    displayName: "List ACR repository tags"

  - task: AzureCLI@2
    inputs:
      azureSubscription: "csacto-connection" # Replace with your Azure Classic service connection name
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        # Get the resource ID for the managed identity
        managedIdentityResourceId=$(az identity show --name $(managedIdentityName) --resource-group $(resourceGroupName) --query 'id' -o tsv)

        # Check if the container app exists
        if az containerapp show --name $(containerAppName) --resource-group $(resourceGroupName) >/dev/null 2>&1; then
          # Update the container app with the new image
          az containerapp update \
            --name $(containerAppName) \
            --resource-group $(resourceGroupName) \
            --image $(acrLoginServer)/$(imageName):$(Build.BuildId) \
            --set-env-vars APP_CONFIG_ENDPOINT=$(appConfigEndpoint)

        else
        # Create the container app with the new image and registry settings
          az containerapp create \
            --name $(containerAppName) \
            --resource-group $(resourceGroupName) \
            --min-replicas 1 \
            --max-replicas 5 \
            --environment $(environmentName) \
            --image $(acrLoginServer)/$(imageName):$(Build.BuildId) \
            --cpu 4.0 \
            --memory 8.0Gi \
            --registry-server $(acrLoginServer) \
            --registry-identity $managedIdentityResourceId \
            --scale-rule-identity $managedIdentityResourceId \
            --ingress internal \
            --set-env-vars APP_CONFIG_ENDPOINT=$(appConfigEndpoint)
        fi
    displayName: "Deploy container to Azure Container App"
