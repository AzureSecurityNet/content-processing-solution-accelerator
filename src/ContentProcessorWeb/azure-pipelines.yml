trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'contentprocessorweb'
  acrName: 'acrcpsdev' # Replace with your Azure Container Registry name
  acrLoginServer: 'acrcpsdev.azurecr.io' # Replace with your ACR login server (e.g., youracrname.azurecr.io)
  resourceGroupName: 'rg-cps-dev' # Replace with your resource group name
  containerAppName: 'cps-processorweb'
  environmentName: 'cps-env-containerapp'
  managedIdentityName: 'mid-CICD'
  cpsApiContainerName: 'cps-processorapi'
  msalClientId: 'f570e91e-30cc-4d7b-a4a7-44553f823ebf' # Replace with your MSAL client ID
  msalAuthority: 'https://login.microsoftonline.com/52b39610-0746-4c25-a83d-d4f89fadedfe' # Replace with your MSAL authority
  msalScope: 'api://f570e91e-30cc-4d7b-a4a7-44553f823ebf/user_impersonation' # Replace with your MSAL scope
  msalTokenScope: '' # Replace with your MSAL token scope
steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'csacto-connection' # Replace with your Azure Classic service connection name
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Log in to Azure Container Registry
        az acr login --name $(acrName)

        # Retrieve the API URL from the Azure Container App
        cpsApiBaseUrl="https://$(az containerapp show --name $(cpsApiContainerName) --resource-group $(resourceGroupName) --query "properties.configuration.ingress.fqdn" -o tsv)"
        echo "CPS API Base URL: $cpsApiBaseUrl"

        # Replace $cpsApiBaseUrl in .env file with URL from Azure Container App
        sed -i "s|\$API_BASE_URL|$cpsApiBaseUrl|g" .env

        # DEUBG: Check the .env file to ensure the value has been replaced correctly
        cat .env 

        # Build the Docker image
        docker build -t $(acrLoginServer)/$(imageName):$(Build.BuildId) .

        # Push the Docker image to ACR
        docker push $(acrLoginServer)/$(imageName):$(Build.BuildId)
    displayName: 'Build and push Docker image'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'csacto-connection' # Replace with your Azure Classic service connection name
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az acr repository show-tags --name $(acrName) --repository $(imageName) --output table
    displayName: 'List ACR repository tags'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'csacto-connection' # Replace with your Azure Classic service connection name
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Get the resource ID for the managed identity
        managedIdentityResourceId=$(az identity show --name $(managedIdentityName) --resource-group $(resourceGroupName) --query 'id' -o tsv)
        cpsApiBaseUrl="https://$(az containerapp show --name $(cpsApiContainerName) --resource-group $(resourceGroupName) --query "properties.configuration.ingress.fqdn" -o tsv)"
        echo "CPS API Base URL deploy: $cpsApiBaseUrl"

        # Check if the container app exists
        if az containerapp show --name $(containerAppName) --resource-group $(resourceGroupName); then
          # Update the container app with the new image
          az containerapp update \
            --name $(containerAppName) \
            --resource-group $(resourceGroupName) \
            --image $(acrLoginServer)/$(imageName):$(Build.BuildId) \
            --cpu 4.0 \
            --memory 8.0Gi \
            --set-env-vars APP_API_BASE_URL=$cpsApiBaseUrl APP_MSAL_AUTH_CLIENT_ID=$(msalClientId) APP_MSAL_AUTH_AUTHORITY=$(msalAuthority) APP_MSAL_AUTH_SCOPE=$(msalScope) APP_MSAL_TOKEN_SCOPE=$(msalTokenScope) 
        else
        # Create the container app with the new image and registry settings
          az containerapp create \
            --name $(containerAppName) \
            --resource-group $(resourceGroupName) \
            --environment $(environmentName) \
            --image $(acrLoginServer)/$(imageName):$(Build.BuildId) \
            --cpu 4.0 \
            --memory 8.0Gi \
            --registry-server $(acrLoginServer) \
            --registry-identity $managedIdentityResourceId \
            --ingress external \ 
            --env-vars APP_API_BASE_URL=$cpsApiBaseUrl APP_MSAL_AUTH_CLIENT_ID=$(msalClientId) APP_MSAL_AUTH_AUTHORITY=$(msalAuthority) APP_MSAL_AUTH_SCOPE=$(msalScope) APP_MSAL_TOKEN_SCOPE=$(msalTokenScope) 

        fi
    displayName: 'Deploy container to Azure Container App'
